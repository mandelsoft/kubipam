/*
 * Copyright 2020 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package types

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	"github.com/gardener/controller-manager-library/pkg/resources"
)

// NewReferenceFrom creates an optimal type agnostic reference to a given object
// to be stored in another one
func NewReferenceFrom(obj metav1.Object, dst metav1.Object) ObjectReference {
	ns := dst.GetNamespace()
	if ns == obj.GetNamespace() {
		ns = ""
	}
	return ObjectReference{
		Name:      dst.GetName(),
		Namespace: ns,
	}
}

// ObjectReference is is plain reference to an object of an implicitly determined type
type ObjectReference struct {
	Name string `json:"name"`
	// +optional
	Namespace string `json:"namespace,omitempty"`
	// +optional
	ClusterId string `json:"clusterId,omitempty"`
}

func (this *ObjectReference) RelativeTo(obj metav1.Object) resources.ObjectName {
	if this.Namespace == "" {
		return ObjectNameRelativeTo(this.Name, obj)
	}
	return resources.NewObjectName(this.Namespace, this.Namespace)
}

func (this *ObjectReference) ClusterKeyRelativeTo(obj resources.Object, gk schema.GroupKind) resources.ClusterObjectKey {
	id := this.ClusterId
	if id == "" {
		id = obj.GetCluster().GetId()
	}
	namespace := this.Namespace
	if namespace == "" {
		namespace = obj.GetNamespace()
	}
	return resources.NewClusterKey(id, gk, namespace, this.Name)
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectReference) DeepCopyInto(out *ObjectReference) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectReference.
func (in *ObjectReference) DeepCopy() *ObjectReference {
	if in == nil {
		return nil
	}
	out := new(ObjectReference)
	in.DeepCopyInto(out)
	return out
}

////////////////////////////////////////////////////////////////////////////////

func ObjectNameRelativeTo(name string, obj metav1.Object) resources.ObjectName {
	return resources.NewObjectName(obj.GetNamespace(), name)
}
