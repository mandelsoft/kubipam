/*
Copyright (c) 2020 Mandelsoft. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mandelsoft/kubipam/pkg/apis/ipam/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPAMRangeLister helps list IPAMRanges.
type IPAMRangeLister interface {
	// List lists all IPAMRanges in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IPAMRange, err error)
	// IPAMRanges returns an object that can list and get IPAMRanges.
	IPAMRanges(namespace string) IPAMRangeNamespaceLister
	IPAMRangeListerExpansion
}

// iPAMRangeLister implements the IPAMRangeLister interface.
type iPAMRangeLister struct {
	indexer cache.Indexer
}

// NewIPAMRangeLister returns a new IPAMRangeLister.
func NewIPAMRangeLister(indexer cache.Indexer) IPAMRangeLister {
	return &iPAMRangeLister{indexer: indexer}
}

// List lists all IPAMRanges in the indexer.
func (s *iPAMRangeLister) List(selector labels.Selector) (ret []*v1alpha1.IPAMRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPAMRange))
	})
	return ret, err
}

// IPAMRanges returns an object that can list and get IPAMRanges.
func (s *iPAMRangeLister) IPAMRanges(namespace string) IPAMRangeNamespaceLister {
	return iPAMRangeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPAMRangeNamespaceLister helps list and get IPAMRanges.
type IPAMRangeNamespaceLister interface {
	// List lists all IPAMRanges in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IPAMRange, err error)
	// Get retrieves the IPAMRange from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IPAMRange, error)
	IPAMRangeNamespaceListerExpansion
}

// iPAMRangeNamespaceLister implements the IPAMRangeNamespaceLister
// interface.
type iPAMRangeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPAMRanges in the indexer for a given namespace.
func (s iPAMRangeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IPAMRange, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPAMRange))
	})
	return ret, err
}

// Get retrieves the IPAMRange from the indexer for a given namespace and name.
func (s iPAMRangeNamespaceLister) Get(name string) (*v1alpha1.IPAMRange, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipamrange"), name)
	}
	return obj.(*v1alpha1.IPAMRange), nil
}
